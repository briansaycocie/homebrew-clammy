#!/bin/bash
#================================================================
# 🔍 Clammy Command-Line Interface
#================================================================
# Main entry point for Clammy
VERSION="1.0.0"
# A comprehensive virus scanning script for macOS and Linux that:
#  - Scans specified directories with optimized performance
#  - Provides detailed logs with timestamps
#  - Quarantines infected files in an organized structure
#  - Maintains quarantine metadata for security analysis
#
# Created: 2025-04-16
# Updated: 2025-04-16
# Version: 1.0.0
#
# USAGE: 
#   ./clamav-scan [options] [directory1] [directory2] ...
#================================================================

# Define exit codes at the very beginning to avoid "unbound variable" errors
# These should match the values in core.sh
EXIT_SUCCESS=0
EXIT_MISSING_DEPENDENCIES=10
EXIT_SCAN_INFECTED=1
EXIT_SCAN_ERROR=2
EXIT_LOW_DISK_SPACE=20
EXIT_PERMISSION_ERROR=30
EXIT_QUARANTINE_ERROR=40

# Get the script's directory for proper relative paths
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CLAMAV_TAP_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"

# Source the core library
source "$CLAMAV_TAP_ROOT/lib/core.sh" || {
  echo "Error: Failed to load core library. Exiting."
  exit $EXIT_SCAN_ERROR
}

#----------- Global Variables -----------#
SCAN_ID="CLAMSCAN-$(date +%Y%m%d%H%M%S)-$$"
SCAN_INTERRUPTED=false
SCAN_OUTPUT_FILE=""
PROGRESS_FILE=""
PROGRESS_PID=""
UPDATE_PID=""
SCAN_START_TIME=$(date +%s)
EXIT_CODE=$EXIT_SUCCESS

#----------- Utility Functions -----------#

# Cleanup function for trap
cleanup() {
  local exit_code="${1:-$EXIT_SUCCESS}"
  local cleanup_status=0
  
  # Only log if we're not in the middle of exiting
  if [ "$1" != "TRAP" ]; then
    log "Cleaning up temporary files..." "INFO"
    echo "Cleaning up temporary files..." >&2
  fi
  
  # Kill any background processes
  for pid_var in PROGRESS_PID UPDATE_PID; do
    pid_value=""
    case "$pid_var" in
      PROGRESS_PID) pid_value="$PROGRESS_PID" ;;
      UPDATE_PID) pid_value="$UPDATE_PID" ;;
    esac
    
    if [ -n "$pid_value" ] && kill -0 "$pid_value" 2>/dev/null; then
      debug "Killing process $pid_value ($pid_var)"
      kill -9 "$pid_value" 2>/dev/null || true
      wait "$pid_value" 2>/dev/null || true
    fi
  done
  
  # Clear the progress line if needed
  printf "\r%-80s\r" " " >&2 2>/dev/null || true
  
  # Initialize the temporary files array
  local temp_files=()
  
  # Add files to the array if they exist
  if [ -n "${SCAN_OUTPUT_FILE:-}" ] && [ -f "${SCAN_OUTPUT_FILE}" ]; then
    temp_files+=("${SCAN_OUTPUT_FILE}")
  fi
  
  if [ -n "${PROGRESS_FILE:-}" ] && [ -f "${PROGRESS_FILE}" ]; then
    temp_files+=("${PROGRESS_FILE}")
    
    # Add the PID file if it exists
    if [ -f "${PROGRESS_FILE}.pid" ]; then
      temp_files+=("${PROGRESS_FILE}.pid")
    fi
  fi
  
  if [ -n "${EXCLUDE_FILE:-}" ] && [ -f "${EXCLUDE_FILE}" ]; then
    temp_files+=("${EXCLUDE_FILE}")
  fi
  
  # Process temporary files if there are any
  if [ ${#temp_files[@]} -gt 0 ]; then
    for file in "${temp_files[@]}"; do
      if [ -f "$file" ]; then
        debug "Cleaning up temporary file: $file"
        if ! rm -f "$file" 2>/dev/null; then
          log "Failed to clean up temporary file: $file" "WARNING"
          cleanup_status=$((cleanup_status + 1))
        fi
      fi
    done
  else
    debug "No temporary files to clean up"
  fi
  
  # If interrupted during scan, notify user
  if [ "$SCAN_INTERRUPTED" = "true" ]; then
    {
      osascript -e 'display notification "Scan was interrupted and did not complete." with title "ClamAV Scan Alert"' 2>/dev/null || 
      echo "ALERT: Scan was interrupted and did not complete." >&2
    } 2>/dev/null || true
  fi
  
  # Don't exit if cleanup is called from trap
  if [ "$1" != "TRAP" ]; then
    debug "Cleanup completed with status: $cleanup_status"
    # Log completion in both success and failure cases
    if [ $cleanup_status -eq 0 ]; then
      log "Cleanup completed successfully" "INFO"
    else
      log "Cleanup completed with warnings or errors" "WARNING"
    fi
    exit "$exit_code"
  else
    # Return non-zero if cleanup failed, for logging purposes
    return $cleanup_status
  fi
}

# Set up a single trap for cleanup with POSIX-compliant syntax
trap 'SCAN_INTERRUPTED=true; 
     if [ -f "$PROGRESS_FILE" ]; then 
       echo "Stopping scan..." > "$PROGRESS_FILE" 2>/dev/null || true; 
     fi; 
     log "Scan interrupted by user signal" "WARNING";
     cleanup TRAP' INT TERM EXIT

# Display progress for the scanning process
# Usage: display_progress progress_file
display_progress() {
  local progress_file="$1"
  local spin='-\|/'
  local i=0
  
  # Function to clear progress line
  clear_progress_line() {
    printf "\r%-80s\r" " " >&2
  }
  
  echo "Progress display started" >&2
  
  while [ -f "$progress_file" ]; do
    i=$(( (i+1) % 4 ))
    local msg=$(cat "$progress_file" 2>/dev/null || echo "Scanning...")
    printf "\r[%c] %s " "${spin:$i:1}" "$msg" >&2
    sleep 0.5
  done
  
  # Clear the line when we're done
  clear_progress_line
  
  # Final message
  {
    printf "\033[1;32mProgress display completed.\033[0m\n" > /dev/tty 2>/dev/null || 
    printf "\033[1;32mProgress display completed.\033[0m\n" >&2
  }
}

# Process command line arguments
process_arguments() {
  # Default values
  SCAN_TARGETS=()
  COUNT_ENABLED=${COUNT_ENABLED:-false}
  USER_EXCLUSIONS=()
  
  # If no arguments provided, use default scan targets
  if [ $# -eq 0 ]; then
    SCAN_TARGETS=("${DEFAULT_SCAN_TARGETS[@]}")
    debug "Using default scan targets: ${SCAN_TARGETS[*]}"
    return 0
  fi
  
  local targets=()
  
  while [ $# -gt 0 ]; do
    case "$1" in
      --help|-h)
        usage
        exit $EXIT_SUCCESS
        ;;
      --version|-V)
        echo "Clammy v${VERSION}"
        echo "Copyright (c) 2025"
        echo ""
        # Also show ClamAV version if available
        if command_exists "clamscan"; then
          clamscan --version
        fi
        exit $EXIT_SUCCESS
        ;;
      --verbose|-v)
        VERBOSE="true"
        DEBUG="true"
        echo "* Verbose output enabled *" >&2
        ;;
      --quiet|-q)
        QUIET_MODE="true"
        echo "* Quiet mode enabled *" >&2
        ;;
      --quick)
        QUICK_MODE="true"
        echo "* Quick mode enabled - skipping non-essential operations *" >&2
        ;;
      --count|-c)
        COUNT_ENABLED="true"
        echo "* File counting enabled *" >&2
        ;;
      --no-quarantine)
        QUARANTINE_ENABLED="false"
        echo "* Quarantine disabled *" >&2
        ;;
      --summary-only)
        SUMMARY_ONLY="true"
        echo "* Summary-only mode enabled *" >&2
        ;;
      --exclude=*)
        pattern="${1#*=}"
        USER_EXCLUSIONS+=("$pattern")
        echo "* Added exclusion pattern: $pattern *" >&2
        ;;
      --max-size=*)
        size="${1#*=}"
        if [[ "$size" =~ ^[0-9]+$ ]]; then
          MAX_FILE_SIZE="$size"
          echo "* Maximum file size set to ${MAX_FILE_SIZE}MB *" >&2
        else
          echo "Error: Invalid file size: $size (must be a number)" >&2
          exit $EXIT_SCAN_ERROR
        fi
        ;;
      -*)
        echo "Error: Unknown option: $1" >&2
        echo "Run '$(basename "$0") --help' for usage information" >&2
        exit $EXIT_SCAN_ERROR
        ;;
      *)
        # Normalize path by removing trailing slashes
        local normalized_path="${1%/}"
        local original_path="$1"
        
        # Validate path
        if [ -e "$normalized_path" ]; then
          # Path exists, get its absolute path
          if [ -d "$normalized_path" ]; then
            # It's a directory
            normalized_path=$(cd "$normalized_path" 2>/dev/null && pwd) || normalized_path="$PWD/$normalized_path"
            echo "✓ Adding scan target: $normalized_path (directory)" >&2
          elif [ -f "$normalized_path" ]; then
            # It's a file
            local dir_part=$(cd "$(dirname "$normalized_path")" 2>/dev/null && pwd)
            normalized_path="${dir_part}/$(basename "$normalized_path")"
            echo "✓ Adding scan target: $normalized_path (file)" >&2
          fi
          
          targets+=("$normalized_path")
          debug "Added scan target: '$normalized_path'"
        else
          # Try relative to current directory
          local full_path="$PWD/$normalized_path"
          if [ -e "$full_path" ]; then
            targets+=("$full_path")
            echo "✓ Adding scan target: $full_path" >&2
            debug "Added scan target: '$full_path' (resolved from relative path)"
          else
            # Try home directory expansion
            if [[ "$normalized_path" == "~"* ]]; then
              full_path="${normalized_path/#\~/$HOME}"
              if [ -e "$full_path" ]; then
                targets+=("$full_path")
                echo "✓ Adding scan target: $full_path" >&2
                debug "Added scan target: '$full_path' (resolved from home path)"
              else
                echo "✗ Path not found: $original_path (tried $full_path)" >&2
                log "WARNING: Scan target does not exist: '$original_path' (skipping)" "WARNING"
              fi
            else
              echo "✗ Path not found: $original_path" >&2
              log "WARNING: Scan target does not exist: '$original_path' (skipping)" "WARNING"
            fi
          fi
        fi
        ;;
    esac
    shift
  done
  
  # If no valid targets were provided, use defaults
  if [ ${#targets[@]} -eq 0 ]; then
    log "No valid scan targets specified, using defaults" "INFO"
    SCAN_TARGETS=("${DEFAULT_SCAN_TARGETS[@]}")
  else
    SCAN_TARGETS=("${targets[@]}")
  fi
  
  debug "Final scan targets: ${SCAN_TARGETS[*]}"
  return 0
}

# Create exclude file for clamscan with patterns to skip
create_exclude_file() {
  local exclude_file
  
  # Create temporary file with a descriptive prefix
  exclude_file=$(mktemp -t "clamav-exclude.XXXXXX") || {
    log "Failed to create temporary exclusion file" "ERROR"
    return 1
  }
  
  debug "Created exclusion file: $exclude_file"
  
  # Combine default exclusions with user-specified ones
  local all_exclusions=("${EXCLUSION_PATTERNS[@]}")
  
  # Add user-specified exclusions
  if [ ${#USER_EXCLUSIONS[@]} -gt 0 ]; then
    all_exclusions+=("${USER_EXCLUSIONS[@]}")
  fi
  
  # Write each pattern on a separate line
  local valid_patterns=0
  local invalid_patterns=0
  
  for pattern in "${all_exclusions[@]}"; do
    # Skip empty patterns
    if [ -z "$pattern" ]; then
      invalid_patterns=$((invalid_patterns + 1))
      continue
    fi
    
    echo "$pattern" >> "$exclude_file" || {
      log "Failed to write pattern '$pattern' to exclusion file" "WARNING"
      invalid_patterns=$((invalid_patterns + 1))
    }
    valid_patterns=$((valid_patterns + 1))
  done
  
  # Report pattern statistics
  debug "Exclusion patterns: $valid_patterns valid, $invalid_patterns invalid"
  
  # Verify file was created successfully
  if [ ! -f "$exclude_file" ]; then
    log "Failed to create exclusion file" "ERROR"
    return 1
  fi
  
  echo "$exclude_file"
}

#----------- Scanning Functions -----------#

# Update virus definitions
update_virus_definitions() {
  log "Updating virus definitions..." "SCAN"
  printf "  🔄 Updating ClamAV virus definitions..."
  
  # Run freshclam to update definitions
  if freshclam --quiet; then
    printf " \033[1;32m✓\033[0m\n"
    log "Virus definitions updated successfully" "SUCCESS"
  else
    printf " \033[1;33m⚠️\033[0m\n"
    log "Error updating virus definitions, continuing with existing definitions" "WARNING"
    printf "  \033[1;33m⚠️ Using existing virus definitions. Consider running 'freshclam' manually.\033[0m\n"
  fi
}

# Display usage information
usage() {
  cat << EOF
Usage: $(basename "$0") [options] [directory1] [directory2] ...

Options:
  -h, --help          Display this help message
  -V, --version       Display version information
  -v, --verbose       Enable verbose output
  -q, --quiet         Minimal output, only errors and findings
  -c, --count         Count files before scanning (may be slow)
  --no-quarantine     Do not quarantine infected files
  --summary-only      Only output summary, not individual scan results
  --exclude=PATTERN   Add exclusion pattern (can be used multiple times)
  --max-size=SIZE     Set maximum file size to scan in MB (default: ${MAX_FILE_SIZE:-500}MB)

If no directories are specified, defaults to scanning:
$(printf "  - %s\n" "${DEFAULT_SCAN_TARGETS[@]}")

Exit codes:
  $EXIT_SUCCESS - No threats detected
  $EXIT_SCAN_INFECTED - Infected files found and quarantined
  $EXIT_SCAN_ERROR - Error occurred during scanning
  $EXIT_MISSING_DEPENDENCIES - Required dependencies not found
  $EXIT_LOW_DISK_SPACE - Insufficient disk space for scan
  $EXIT_QUARANTINE_ERROR - Error processing quarantined files
EOF
}
# Run the actual ClamAV scan
run_scan() {
  log "Starting ClamAV scan..." "SCAN"
  echo "========================================"
  echo "Starting ClamAV scan on ${#SCAN_TARGETS[@]} targets"
  echo "- Excluded patterns: ${#EXCLUSION_PATTERNS[@]} patterns defined"
  echo "- Maximum file size to scan: ${MAX_FILE_SIZE}MB"
  echo "- Quarantine directory: ${QUARANTINE_DIR}"
  echo "========================================"
  
  # Create exclusion file for clamscan
  EXCLUDE_FILE=$(create_exclude_file)
  if [ ! -f "$EXCLUDE_FILE" ]; then
    log "Error: Failed to create exclusion file!" "ERROR"
    exit $EXIT_SCAN_ERROR
  fi
  
  # Create progress tracking file
  PROGRESS_FILE=$(mktemp -t "clamav-progress.XXXXXX")
  if [ ! -f "$PROGRESS_FILE" ]; then
    log "Warning: Failed to create progress file. Progress display will be disabled." "WARNING"
  else
    chmod 644 "$PROGRESS_FILE" # Make sure it's readable
    echo "Initializing scan..." > "$PROGRESS_FILE"
  fi
  
  # Create a temporary file for scan output
  SCAN_OUTPUT_FILE=$(mktemp -t "clamav-scan-output.XXXXXX")
  if [ ! -f "$SCAN_OUTPUT_FILE" ]; then
    log "Error: Failed to create temporary file for scan output" "ERROR"
    exit $EXIT_SCAN_ERROR
  fi
  
  # Start progress display in background if verbose mode is not enabled
  if [ "$VERBOSE" != "true" ] && [ -n "$PROGRESS_FILE" ]; then
    display_progress "$PROGRESS_FILE" &
    PROGRESS_PID=$!
    # Store PID and make it available to trap
    echo "$PROGRESS_PID" > "${PROGRESS_FILE}.pid" 2>/dev/null || true
    debug "Started progress display with PID: $PROGRESS_PID"
  fi
  
  # Define clamscan options
  CLAMSCAN_OPTIONS=(
    --recursive                 # Scan directories recursively
    --infected                  # Only print infected files
    "--exclude-dir=${SYS_DEV_PATH}"    # Don't scan /dev directory
    "--exclude-dir=${SYS_PROC_PATH:-/proc}"   # Don't scan /proc directory
    "--exclude-dir=/sys"               # Don't scan /sys directory
    "--exclude-dir=${SYS_VAR_VM_PATH:-/var/vm}"    # Don't scan virtual memory files
    "--max-filesize=${MAX_FILE_SIZE}"  # Skip files larger than this size (MB)
    "--max-scansize=${MAX_FILE_SIZE}"  # Maximum amount of data to scan from a file
    "--exclude-dir=${QUARANTINE_DIR}"  # Don't scan quarantine directory
  )
  
  # Add exclusion file if available
  if [ -f "$EXCLUDE_FILE" ]; then
    CLAMSCAN_OPTIONS+=("--exclude-dir=@${EXCLUDE_FILE}")
  fi
  
  # Add quarantine option if enabled
  if [ "$QUARANTINE_ENABLED" = "true" ]; then
    # Create temporary quarantine directory if needed
    TEMP_QUARANTINE_DIR="$(dirname "${QUARANTINE_DIR}")/tmp"
    mkdir -p "$TEMP_QUARANTINE_DIR" 2>/dev/null || {
      log "Error: Failed to create temporary quarantine directory: $TEMP_QUARANTINE_DIR" "ERROR"
      exit $EXIT_QUARANTINE_ERROR
    }
    CLAMSCAN_OPTIONS+=("--move=${TEMP_QUARANTINE_DIR}")
  fi
  
  # Display banner
  echo "===================================================="
  echo "    🧹 ClamAV Enhanced Virus Scanner - v${VERSION} 🦠    "
  echo "===================================================="
  echo "    📅 $(date)"
  echo "===================================================="
  echo ""
  # Update progress file
  if [ -f "$PROGRESS_FILE" ]; then
    echo "Starting scan at $(date +%H:%M:%S)" > "$PROGRESS_FILE"
  fi
  
  # Run the scan
  echo "Running ClamAV scan... This may take some time."
  echo "Press Ctrl+C to abort"
  echo ""
  
  # Execute clamscan with proper redirection
  clamscan "${CLAMSCAN_OPTIONS[@]}" "${SCAN_TARGETS[@]}" > "$SCAN_OUTPUT_FILE" 2>&1
  SCAN_STATUS=$?
  SCAN_END_TIME=$(date +%s)
  
  # Update progress file
  if [ -f "$PROGRESS_FILE" ]; then
    echo "Scan completed, processing results..." > "$PROGRESS_FILE"
  fi
  
  # Kill progress display if it was started
  if [ -n "$PROGRESS_PID" ] && kill -0 "$PROGRESS_PID" 2>/dev/null; then
    debug "Stopping progress display (PID: $PROGRESS_PID)"
    kill "$PROGRESS_PID" 2>/dev/null || true
    wait "$PROGRESS_PID" 2>/dev/null || true
  fi
  
  log "clamscan completed with exit code: $SCAN_STATUS" "INFO"
  return $SCAN_STATUS
}

# Process scan results
process_scan_results() {
  local scan_status=$1
  local scan_output_file=$2
  
  # Calculate scan duration
  local scan_duration=$((SCAN_END_TIME - SCAN_START_TIME))
  local duration_formatted=$(format_duration $SCAN_START_TIME $SCAN_END_TIME)
  
  debug "Processing scan results (status: $scan_status, duration: $duration_formatted)"
  
  # Extract scan statistics
  local scanned_files=0
  local infected_files=0
  
  if [ -f "$scan_output_file" ]; then
    scanned_files=$(grep "Scanned files:" "$scan_output_file" | awk '{print $3}' || echo "0")
    infected_files=$(grep "Infected files:" "$scan_output_file" | awk '{print $3}' || echo "0")
  fi
  
  # Ensure we have valid numeric values
  if ! [[ "$scanned_files" =~ ^[0-9]+$ ]]; then
    scanned_files=0
    debug "WARNING: Failed to parse scanned files count from output"
  fi
  
  if ! [[ "$infected_files" =~ ^[0-9]+$ ]]; then
    infected_files=0
    debug "WARNING: Failed to parse infected files count from output"
  fi
  
  # Process infected files if any were found
  if [ "${infected_files:-0}" -gt 0 ] && [ "$QUARANTINE_ENABLED" = "true" ]; then
    log "Found ${infected_files} infected files." "SCAN"
    echo "Found ${infected_files} infected files."
    
    # Organize quarantined files
    process_quarantined_files
  fi
  
  # Generate report
  generate_scan_report "$scan_status" "$scanned_files" "$infected_files" "$duration_formatted"
  
  # Show summary
  print_final_summary "$scan_status" "$duration_formatted" "$scanned_files" "$infected_files"
  
  # Set exit code based on scan status
  case "$scan_status" in
    0)  # No viruses found
        EXIT_CODE=$EXIT_SUCCESS
        ;;
    1)  # Viruses found
        EXIT_CODE=$EXIT_SCAN_INFECTED
        ;;
    *)  # Error during scanning
        EXIT_CODE=$EXIT_SCAN_ERROR
        ;;
  esac
  
  return 0
}

# Process quarantined files - simple implementation
process_quarantined_files() {
  log "Processing quarantined files..." "QUARANTINE"
  
  # Skip if quarantine is disabled
  if [ "$QUARANTINE_ENABLED" != "true" ]; then
    log "Quarantine processing skipped (disabled in configuration)" "INFO"
    return 0
  fi
  
  # Create the year-month subdirectory for organized storage
  local current_date=$(date "+%Y-%m-%d")
  local current_year_month=$(date "+%Y-%m")
  local quarantine_current_dir="${QUARANTINE_DIR}/${current_year_month}"
  
  # Create directory if it doesn't exist
  if ! ensure_dir_exists "$quarantine_current_dir"; then
    log "Error: Failed to create quarantine directory: $quarantine_current_dir" "ERROR"
    return 1
  fi
  
  # Move files from temporary quarantine to the organized structure
  if [ -d "$TEMP_QUARANTINE_DIR" ]; then
    log "Moving infected files to quarantine: $quarantine_current_dir" "QUARANTINE"
    
    # Count files in temp quarantine
    local file_count=$(find "$TEMP_QUARANTINE_DIR" -type f 2>/dev/null | wc -l)
    
    if [ "$file_count" -gt 0 ]; then
      # Move each file with a timestamp to avoid conflicts
      find "$TEMP_QUARANTINE_DIR" -type f -print0 2>/dev/null | 
      while IFS= read -r -d $'\0' file; do
        local filename=$(basename "$file")
        local timestamp=$(date +%s)
        local target="${quarantine_current_dir}/${filename}_${timestamp}"
        
        if mv "$file" "$target" 2>/dev/null; then
          log "Quarantined: $filename" "QUARANTINE"
          # Set secure permissions
          chmod 600 "$target" 2>/dev/null || true
        else
          log "Failed to quarantine: $filename" "ERROR"
        fi
      done
    else
      log "No files found in temporary quarantine directory." "WARNING"
    fi
  else
    log "Temporary quarantine directory not found: $TEMP_QUARANTINE_DIR" "ERROR"
    return 1
  fi
  
  return 0
}

# Format duration for readable output
# Usage: format_duration start_time [end_time]
format_duration() {
  local start_time=$1
  local end_time=${2:-$(date +%s)}
  local duration=$((end_time - start_time))
  
  # Format the duration as hours, minutes, seconds
  local hours=$((duration / 3600))
  local minutes=$(( (duration % 3600) / 60 ))
  local seconds=$((duration % 60))
  
  # Format with appropriate units
  if [ $hours -gt 0 ]; then
    printf '%dh:%02dm:%02ds' $hours $minutes $seconds
  elif [ $minutes -gt 0 ]; then
    printf '%dm:%02ds' $minutes $seconds
  else
    printf '%ds' $seconds
  fi
}

# Generate a detailed scan report
# Usage: generate_scan_report status scanned_files infected_files duration
generate_scan_report() {
  local status=$1
  local scanned_files=$2
  local infected_files=$3
  local duration=$4
  local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
  local report_file="${LOG_DIR}/scan_report_$(date +%Y%m%d_%H%M%S).txt"
  
  log "Generating scan report: $report_file" "INFO"
  
  # Create the report file with enhanced formatting
  {
    echo "========================================================"
    echo "                 CLAMAV SCAN REPORT"
    echo "========================================================"
    echo "Report Generated: $timestamp"
    echo "Scan ID: $SCAN_ID"
    echo ""
    echo "SCAN INFORMATION"
    echo "----------------"
    printf "%-25s: %s\n" "Start time" "$(date -r $SCAN_START_TIME "+%Y-%m-%d %H:%M:%S")"
    printf "%-25s: %s\n" "End time" "$(date -r $SCAN_END_TIME "+%Y-%m-%d %H:%M:%S")"
    printf "%-25s: %s\n" "Duration" "$duration"
    printf "%-25s: %s\n" "Executed by" "$(whoami)@$(hostname)"
    echo ""
    echo "SCAN TARGETS"
    echo "------------"
    for target in "${SCAN_TARGETS[@]}"; do
      printf "• %s\n" "$target"
    done
    echo ""
    echo "SCAN RESULTS"
    echo "------------"
    printf "%-25s: %s\n" "Files scanned" "$scanned_files"
    printf "%-25s: %s\n" "Infected files" "$infected_files"
    printf "%-25s: %s\n" "Exit code" "$status"
    
    # Add scan rate calculation if we have valid numbers
    if [ "$scanned_files" -gt 0 ] && [ "$scan_duration" -gt 0 ]; then
      local scan_rate=$(( scanned_files / scan_duration ))
      printf "%-25s: %s files/second\n" "Scan rate" "$scan_rate"
    fi
    
    # Status indicator
    case "$status" in
      0) printf "%-25s: ✅ No infections found\n" "Status" ;;
      1) printf "%-25s: ⚠️ Infections found and quarantined\n" "Status" ;;
      2) printf "%-25s: ❌ Scan errors occurred\n" "Status" ;;
      *) printf "%-25s: ℹ️ Unknown status code\n" "Status" ;;
    esac
    
    echo ""
    echo "SYSTEM INFORMATION"
    echo "-----------------"
    printf "%-25s: %s\n" "Hostname" "$(hostname 2>/dev/null || echo 'unknown')"
    printf "%-25s: %s\n" "Operating system" "$(uname -a 2>/dev/null || echo 'unknown')"
    printf "%-25s: %s\n" "ClamAV version" "$(clamscan --version 2>/dev/null | head -n 1 || echo 'unknown')"
    echo ""
    
    # Show infection details if any
    if [ "$infected_files" -gt 0 ] && [ -f "$SCAN_OUTPUT_FILE" ]; then
      echo "INFECTED FILES"
      echo "---------------"
      echo "The following files were found to be infected:"
      echo ""
      
      # Extract and display infected files with their detections
      grep -E ": .+FOUND$" "$SCAN_OUTPUT_FILE" | while read -r line; do
        local file_path=$(echo "$line" | sed -E 's/^(.*): .* FOUND$/\1/')
        local virus_name=$(echo "$line" | sed -E 's/^.*: (.*) FOUND$/\1/')
        printf "• %s\n  └─ %s\n" "$file_path" "$virus_name"
      done
      
      echo ""
      echo "QUARANTINE INFORMATION"
      echo "----------------------"
      printf "%-25s: %s\n" "Quarantine enabled" "$QUARANTINE_ENABLED"
      printf "%-25s: %s\n" "Quarantine location" "$quarantine_current_dir"
      printf "%-25s: %s\n" "Retention policy" "${QUARANTINE_RETENTION_POLICY:-time-based}"
      printf "%-25s: %s days\n" "Retention period" "${QUARANTINE_MAX_AGE:-90}"
    fi
    
    echo "========================================================"
    echo "End of Report"
    echo "========================================================"
  } > "$report_file" 2>/dev/null || {
    log "Failed to write scan report to $report_file" "ERROR"
    return 1
  }
  
  # Set permissions on the report file
  chmod 644 "$report_file" 2>/dev/null || log "Failed to set permissions on report file" "WARNING"
  
  log "Scan report generated: $report_file" "SUCCESS"
  echo "Scan report generated: $report_file"
  
  return 0
}

# Display the final summary for the scan
# Usage: print_final_summary status duration scanned_files infected_files
print_final_summary() {
  local status_code="$1"
  local duration="$2"
  local scanned_files="$3"
  local infected_files="$4"
  
  # Format summary header
  echo ""
  echo "════════════════════════════════════════════════════════════"
  echo "                  SCAN SUMMARY REPORT                       "
  echo "════════════════════════════════════════════════════════════"
  echo ""
  
  # Format status line with color and quarantine info
  case "$status_code" in
    0) printf "\033[1;32m✅ CLEAN SCAN: No infections detected in %s files\033[0m\n" "$scanned_files" ;;
    1) 
      if [ "$QUARANTINE_ENABLED" = "true" ]; then
        printf "\033[1;33m⚠️ INFECTIONS FOUND: %d infected files quarantined\033[0m\n" "$infected_files"
      else
        printf "\033[1;31m⚠️ INFECTIONS FOUND: %d infected files detected (QUARANTINE DISABLED)\033[0m\n" "$infected_files"
        printf "\033[1;31m   WARNING: Infected files remain in their original locations!\033[0m\n"
      fi
      ;;
    2) printf "\033[1;31m❌ SCAN ERROR: Problems encountered during scan\033[0m\n" ;;
    *) printf "\033[1;36mℹ️ UNKNOWN STATUS: Scan completed with code %d\033[0m\n" "$status_code" ;;
  esac
  echo ""
  printf "\033[1;36m%-20s\033[0m : %s\n" "Scan duration" "$duration"
  printf "\033[1;36m%-20s\033[0m : %s\n" "Files scanned" "$scanned_files"
  printf "\033[1;36m%-20s\033[0m : %s\n" "Infected files" "$infected_files"
  
  if [ "$infected_files" -gt 0 ]; then
    printf "\033[1;36m%-20s\033[0m : %s\n" "Quarantine location" "${QUARANTINE_DIR}"
    printf "\033[1;36m%-20s\033[0m : %s\n" "Report location" "${LOG_DIR}/scan_report_*.txt"
  fi
  
  echo ""
  printf "\033[1;36m%-20s\033[0m : %s\n" "Log file" "$LOGFILE"
  
  # Add advice based on status
  echo ""
  case "$status_code" in
    0) 
      echo "🔍 RECOMMENDATION: Schedule regular scans to ensure continued protection."
      ;;
    1) 
      echo "🔍 RECOMMENDATION: Review quarantined files in the generated report."
      echo "   Consider checking other devices on your network that may be infected."
      ;;
    2) 
      echo "🔍 RECOMMENDATION: Check the log file for details about scan errors."
      echo "   Try running the scan again with fewer targets or excluding problem areas."
      ;;
  esac
  
  echo ""
  echo "════════════════════════════════════════════════════════════"
  echo ""
}

#============================================================
# Main Execution Flow
#============================================================

main() {
  # Initialize DEBUG and VERBOSE for debug function to work before config is loaded
  DEBUG=${DEBUG:-false}
  VERBOSE=${VERBOSE:-false}
  
  # Display banner
  echo "===================================================="
  echo "    🧹 ClamAV Enhanced Virus Scanner - v1.0.0 🦠    "
  echo "===================================================="
  echo "    📅 $(date)"
  echo "===================================================="
  echo ""
  
  # Setup environment (loads config, initializes paths, checks dependencies)
  if ! setup_environment; then
    echo "Error: Failed to set up environment. Exiting." >&2
    exit $EXIT_SCAN_ERROR
  fi
  
  # Process command line arguments
  process_arguments "$@"
  
  # Update virus definitions
  update_virus_definitions
  
  # Run the scan
  run_scan
  SCAN_STATUS=$?
  
  # Process scan results
  process_scan_results "$SCAN_STATUS" "$SCAN_OUTPUT_FILE"
  
  # Final log entry
  log "Scan completed with status: $EXIT_CODE" "INFO"
  
  # Exit with the determined status code
  exit $EXIT_CODE
}

# Call the main function to start execution
main "$@"

